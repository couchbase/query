#!/bin/bash

#  Copyright 2023-Present Couchbase, Inc.
#
#  Use of this software is governed by the Business Source License included
#  in the file licenses/BSL-Couchbase.txt.  As of the Change Date specified
#  in that file, in accordance with the Business Source License, use of this
#  software will be governed by the Apache License, Version 2.0, included in
#  the file licenses/APL2.txt.

# This scripts generates a go-lang map object containing the grammar used by the Query engine

if [ $# != 1 ]
then
  echo "Missing argument to $0"
  exit 1
fi

BASEPATH=$1
FILE=${BASEPATH}/shell/cbq/command/syntax_data.go

if [ ! -f ${BASEPATH}/parser/n1ql/n1ql.y ]
then
  echo "Invalid base path: ${BASEPATH}"
  exit 1
fi

if [ ! -f `which bison` ]
then
  echo "bison not found"
  exit 1
fi

AC='
BEGIN \
{
  active=0
  count=0
  terms[0]=""
  delete terms[0]
}
function fixTerm(t) \
{
  switch (t)
  {
    case "ε": return "<empty rule>"
    case "%empty": return "<empty rule>"
    case "statement_body": return "statements"
    case "ident_or_default": return "<identifier>"
    case "IDENT": return "<identifier>"
    case "IDENT_ICASE": return "<identifier>i"
    case "NAMESPACE_ID": return "<namespace-identifier>"
    case "expr": return "expression"
    case "OPTIM_HINTS": return "/*OPTIM_HINTS*/"
    case "hints_input": return "OPTIM_HINTS"
  }
  gsub("stmt","statement",t)
  if (index(t,"opt_")==1) t = "["substr(t,5)"]"
  return t
}
function printRule(terms) \
{
  if (length(terms)<2||(length(terms)==2&&terms[0]=="["terms[1]"]")) return
  printf("\t\"%s\": [][]string{\n\t\t[]string{",terms[0])
  delete terms[0]
  comma=0
  for (k in terms)
  {
    if (terms[k]=="|")
    {
      printf("},\n\t\t[]string{")
      comma=0
    }
    else
    {
      if (comma==1) printf(",")
      printf("\"%s\"",terms[k])
      comma=1
    }
  }
  printf("},\n\t},\n")
}
function excludeRule(r) \
{
  switch (r)
  {
    case "input": return 1
    case "expr_input": return 1
    case "<identifier>": return 1
    case "[trailer]": return 1
  }
  if (index($2,"$")!=0||substr($2,1,1)=="_") return 1
  return 0
}
function skipRecord() \
{
  for (i=3;i<=NF;i++) if (substr($i,1,1)=="_"||$i=="%empty"||$i=="ε") return 1
  return 0
}
index($2,":")!=0 \
{
  gsub(":","",$2)
  r=fixTerm($2)
  if (excludeRule(r)==1) { active=0; next }
  if (terms[0]!=r)
  {
    printRule(terms)
    delete terms
  }
  active=1
  terms[0] = r
  if (skipRecord()==0)
  {
    for (i=3;i<=NF;i++) if (index($i,"$")==0) terms[length(terms)] = fixTerm($i)
  }
  next
}
$2=="|" \
{
  if (active!=1) next
  if (skipRecord()==0)
  {
    if (length(terms)>1) terms[length(terms)] = "|"
    for (i=3;i<=NF;i++) if (index($i,"$")==0) terms[length(terms)] = fixTerm($i)
  }
  next
}
END \
{
  printRule(terms)
  print "}"
}
'

bison -v -o /dev/null --report-file=/tmp/$$.bison ${BASEPATH}/parser/n1ql/n1ql.y 2> /tmp/$$.bison_out
if [ $? -ne 0 -o -s /tmp/$$.bison_out ]
then
  rm -f /tmp/$$.bison
  rm -f /tmp/$$.bison_out
  rm -f ${FILE}
  echo "Failed to generate syntax help data"
  exit 1
fi

rm -f /tmp/$$.bison_out

cat - << EOF > "${FILE}"
//  Copyright 2023-Present Couchbase, Inc.
//
//  Use of this software is governed by the Business Source License included
//  in the file licenses/BSL-Couchbase.txt.  As of the Change Date specified
//  in that file, in accordance with the Business Source License, use of this
//  software will be governed by the Apache License, Version 2.0, included in
//  the file licenses/APL2.txt.

// WARNING: This file is generated by the build process. DO NOT EDIT.

package command

var statement_syntax = map[string][][]string{
EOF
sed -n '/^Grammar/,/^Terminals/ p' /tmp/$$.bison|grep -v "^[A-Z]"|sed 's/stmt/statement/g;s/ε/%empty/g'|awk "${AC}" >> "${FILE}"
rm -f /tmp/$$.bison
go fmt ${FILE} 2>/dev/null
if [ $? -ne 0 ]
then
  rm -f ${FILE}
  echo "Failed to generate syntax help data"
  exit 1
fi
