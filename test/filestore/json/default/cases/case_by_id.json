[
    {
        "description": "non-existant id not an error, just empty results",
        "statements": "SELECT * FROM default:game WHERE META(game).id = \"x\" ORDER BY id",
        "results": [
            ]
    },
    {
        "statements": "EXPLAIN SELECT * FROM default:game WHERE META(game).id = \"damien\" ORDER BY id",
        "results": [
        {
        "plan": {
            "#operator": "Sequence",
            "~children": [
                {
                    "#operator": "Sequence",
                    "~children": [
                        {
                                "#operator": "IndexScan",
                                "index_id": "#primary",
                                "index": "#primary",
                                "keyspace": "game",
                                "namespace": "default",
                                "spans": [
                                    {
                                        "Exact": true,
                                        "Range": {
                                            "High": [
                                                "\"damien\""
                                            ],
                                            "Inclusion": 3,
                                            "Low": [
                                                "\"damien\""
                                            ]
                                        }
                                    }
                                ],
                                "using": "system"
                        },
                        {
                            "#operator": "Fetch",
                            "keyspace": "game",
                            "namespace": "default"
                        },
                        {
                            "#operator": "Parallel",
                            "~child": {
                                "#operator": "Sequence",
                                "~children": [
                                    {
                                        "#operator": "Filter",
                                        "condition": "((meta(`game`).`id`) = \"damien\")"
                                    },
                                    {
                                        "#operator": "InitialProject",
                                        "result_terms": [
                                            {
                                                "expr": "self",
                                                "star": true
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "#operator": "Order",
                    "sort_terms": [
                        {
                            "expr": "(`game`.`id`)"
                        }
                    ]
                }
            ]
        },
        "text": "SELECT * FROM default:game WHERE META(game).id = \"damien\" ORDER BY id"
        }
    ]
    },
    {
        "description": "query with WHERE clause matches multiple IDs (some non-existant) joined by OR should not give error",
        "statements": "SELECT META(game).id FROM default:game WHERE META(game).id = \"damien\" OR META(game).id = \"dustin\" OR META(game).id = \"does_not_exist\" ORDER BY id",
         "results": [
        {
            "id": "damien"
        },
        {
            "id": "dustin"
        }
    ]
    },
    {
        "description": "query with WHERE clause using OR but not only ID comparisons should scan",
        "statements": "EXPLAIN SELECT * FROM default:game WHERE META(game).id = \"damien\" OR name = \"foo\" ORDER BY id",
         "results": [
        {
        "plan": {
            "#operator": "Sequence",
            "~children": [
                {
                    "#operator": "Sequence",
                    "~children": [
                        {
                            "#operator": "PrimaryScan",
                            "index": "#primary",
                            "keyspace": "game",
                            "namespace": "default",
                            "using": "system"
                        },
                        {
                            "#operator": "Fetch",
                            "keyspace": "game",
                            "namespace": "default"
                        },
                        {
                            "#operator": "Parallel",
                            "~child": {
                                "#operator": "Sequence",
                                "~children": [
                                    {
                                        "#operator": "Filter",
                                        "condition": "(((meta(`game`).`id`) = \"damien\") or ((`game`.`name`) = \"foo\"))"
                                    },
                                    {
                                        "#operator": "InitialProject",
                                        "result_terms": [
                                            {
                                                "expr": "self",
                                                "star": true
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "#operator": "Order",
                    "sort_terms": [
                        {
                            "expr": "(`game`.`id`)"
                        }
                    ]
                }
            ]
            },
        "text": "SELECT * FROM default:game WHERE META(game).id = \"damien\" OR name = \"foo\" ORDER BY id"
        }
    ]
    },
    {
        "description": "query with WHERE clause matches multiple IDs nested in ANY comparison with literal array of ids should not scan",
        "statements": "EXPLAIN SELECT * FROM default:game WHERE ANY id IN [\"damien\", \"dustin\", \"junyi\"]  satisfies META(game).id = id END ORDER BY id",
        "results": [
        {
        "plan": {
            "#operator": "Sequence",
            "~children": [
                {
                    "#operator": "Sequence",
                    "~children": [
                        {
                            "#operator": "PrimaryScan",
                            "index": "#primary",
                            "keyspace": "game",
                            "namespace": "default",
                            "using": "system"
                        },
                        {
                            "#operator": "Fetch",
                            "keyspace": "game",
                            "namespace": "default"
                        },
                        {
                            "#operator": "Parallel",
                            "~child": {
                                "#operator": "Sequence",
                                "~children": [
                                    {
                                        "#operator": "Filter",
                                        "condition": "any `id` in [\"damien\", \"dustin\", \"junyi\"] satisfies ((meta(`game`).`id`) = `id`) end"
                                    },
                                    {
                                        "#operator": "InitialProject",
                                        "result_terms": [
                                            {
                                                "expr": "self",
                                                "star": true
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "#operator": "Order",
                    "sort_terms": [
                        {
                            "expr": "(`game`.`id`)"
                        }
                    ]
                }
            ]
        },
        "text": "SELECT * FROM default:game WHERE ANY id IN [\"damien\", \"dustin\", \"junyi\"]  satisfies META(game).id = id END ORDER BY id"
        }
    ]
    },
    {
        "description": "query with WHERE clause matches multiple IDs (some non-existant) nested in ANY comparison with literal array of ids should not give error",
        "statements": "SELECT META(game).id FROM default:game WHERE ANY id IN [\"damien\", \"dustin\", \"does_not_exist\"] satisfies META(game).id = id END ORDER BY id",
        "results": [
        {
            "id": "damien"
        },
        {
            "id": "dustin"
        }
    ]
    },
    {
        "description": "query with WHERE clause using ANY but not just comparison with literal array of docids should scan",
        "statements": "explain SELECT META(game).id FROM default:game WHERE ANY id IN [\"damien\", \"dustin\", \"does_not_exist\"] satisfies META(game).id = id or id IS NOT NULL END ORDER BY id",
        "results": [
        {
        "plan": {
            "#operator": "Sequence",
            "~children": [
                {
                    "#operator": "Sequence",
                    "~children": [
                        {
                            "#operator": "PrimaryScan",
                            "index": "#primary",
                            "keyspace": "game",
                            "namespace": "default",
                            "using": "system"
                        },
                        {
                            "#operator": "Fetch",
                            "keyspace": "game",
                            "namespace": "default"
                        },
                        {
                            "#operator": "Parallel",
                            "~child": {
                                "#operator": "Sequence",
                                "~children": [
                                    {
                                        "#operator": "Filter",
                                        "condition": "any `id` in [\"damien\", \"dustin\", \"does_not_exist\"] satisfies (((meta(`game`).`id`) = `id`) or (`id` is not null)) end"
                                    },
                                    {
                                        "#operator": "InitialProject",
                                        "result_terms": [
                                            {
                                                "expr": "(meta(`game`).`id`)"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "#operator": "Order",
                    "sort_terms": [
                        {
                            "expr": "(`game`.`id`)"
                        }
                    ]
                }
            ]
            },
            "text": "SELECT META(game).id FROM default:game WHERE ANY id IN [\"damien\", \"dustin\", \"does_not_exist\"] satisfies META(game).id = id or id IS NOT NULL END ORDER BY id"
        }
    ]
   },
   {
        "description": "query with only COUNT(*) should perform fast count",
        "statements": "EXPLAIN SELECT COUNT(*) as c FROM default:game",
        "results": [
        {
        "plan": {
            "#operator": "Sequence",
            "~children": [
                {
                    "#operator": "CountScan",
                    "keyspace": "game",
                    "namespace": "default"
                },
                {
                    "#operator": "Parallel",
                    "maxParallelism": 1,
                    "~child": {
                        "#operator": "Sequence",
                        "~children": [
                            {
                                "#operator": "InitialGroup",
                                "aggregates": [
                                    "count(*)"
                                ],
                                "group_keys": []
                            }
                        ]
                    }
                },
                {
                    "#operator": "IntermediateGroup",
                    "aggregates": [
                        "count(*)"
                    ],
                    "group_keys": []
                },
                {
                    "#operator": "FinalGroup",
                    "aggregates": [
                        "count(*)"
                    ],
                    "group_keys": []
                },
                {
                    "#operator": "Parallel",
                    "maxParallelism": 1,
                    "~child": {
                        "#operator": "Sequence",
                        "~children": [
                            {
                                "#operator": "InitialProject",
                                "discard_original": true,
                                "result_terms": [
                                    {
                                        "as": "c",
                                        "expr": "count(*)"
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        },
        "text": "SELECT COUNT(*) as c FROM default:game"
        }
    ]   
   },
   {
        "description": "query with COUNT(*) and anything else should perform scan",
        "statements": "EXPLAIN SELECT COUNT(*), MIN(score) as sc FROM default:game ORDER BY MIN(score)",
        "results": [
        {
        "plan": {
            "#operator": "Sequence",
            "~children": [
                {
                    "#operator": "Sequence",
                    "~children": [
                        {
                            "#operator": "PrimaryScan",
                            "index": "#primary",
                            "keyspace": "game",
                            "namespace": "default",
                            "using": "system"
                        },
                        {
                            "#operator": "Fetch",
                            "keyspace": "game",
                            "namespace": "default"
                        },
                        {
                            "#operator": "Parallel",
                            "~child": {
                                "#operator": "Sequence",
                                "~children": [
                                    {
                                        "#operator": "InitialGroup",
                                        "aggregates": [
                                            "count(*)",
                                            "min((`game`.`score`))"
                                        ],
                                        "group_keys": []
                                    }
                                ]
                            }
                        },
                        {
                            "#operator": "IntermediateGroup",
                            "aggregates": [
                                "count(*)",
                                "min((`game`.`score`))"
                            ],
                            "group_keys": []
                        },
                        {
                            "#operator": "FinalGroup",
                            "aggregates": [
                                "count(*)",
                                "min((`game`.`score`))"
                            ],
                            "group_keys": []
                        },
                        {
                            "#operator": "Parallel",
                            "~child": {
                                "#operator": "Sequence",
                                "~children": [
                                    {
                                        "#operator": "InitialProject",
                                        "result_terms": [
                                            {
                                                "expr": "count(*)"
                                            },
                                            {
                                                "as": "sc",
                                                "expr": "min((`game`.`score`))"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "#operator": "Order",
                    "sort_terms": [
                        {
                            "expr": "min((`game`.`score`))"
                        }
                    ]
                }
            ]
            },
        "text": "SELECT COUNT(*), MIN(score) as sc FROM default:game ORDER BY MIN(score)"
        }
    ]
   },
   {
        "description": "query with COUNT(*) with WHERE clause should perform scan",
        "statements": "EXPLAIN SELECT COUNT(*) as c FROM default:game WHERE score > 5",
         "results": [
        {
        "plan": {
            "#operator": "Sequence",
            "~children": [
                {
                    "#operator": "PrimaryScan",
                    "index": "#primary",
                    "keyspace": "game",
                    "namespace": "default",
                    "using": "system"
                },
                {
                    "#operator": "Fetch",
                    "keyspace": "game",
                    "namespace": "default"
                },
                {
                    "#operator": "Parallel",
                    "~child": {
                        "#operator": "Sequence",
                        "~children": [
                            {
                                "#operator": "Filter",
                                "condition": "(5 \u003c (`game`.`score`))"
                            },
                            {
                                "#operator": "InitialGroup",
                                "aggregates": [
                                    "count(*)"
                                ],
                                "group_keys": []
                            }
                        ]
                    }
                },
                {
                    "#operator": "IntermediateGroup",
                    "aggregates": [
                        "count(*)"
                    ],
                    "group_keys": []
                },
                {
                    "#operator": "FinalGroup",
                    "aggregates": [
                        "count(*)"
                    ],
                    "group_keys": []
                },
                {
                    "#operator": "Parallel",
                    "~child": {
                        "#operator": "Sequence",
                        "~children": [
                            {
                                "#operator": "InitialProject",
                                "discard_original": true,
                                "result_terms": [
                                    {
                                        "as": "c",
                                        "expr": "count(*)"
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        },
        "text": "SELECT COUNT(*) as c FROM default:game WHERE score > 5"
        }
    ]
   }
]
