[
    {
	"testcase": "MB-51753",
        "explain": {
            "disabled": false,
            "results": [
                {
                    "present": true
                }
            ],
            "statement": "SELECT true AS present FROM $explan AS p WHERE ANY v WITHIN p.`plan`.`~children` SATISFIES v.`#operator` = \"InitialProject\" AND CONTAINS(v.`result_terms`[0].`expr`, \"correlated \") END"
        },
        "statements":"SELECT (WITH a AS (s.a11) SELECT RAW c1 FROM a AS c1) AS arr, s.test_id FROM shellTest s WHERE s.c11 IN [1, 2] AND type = \"left\"",
        "results": [
            {
                "arr": [
                    1,
                    2,
                    3,
                    4
                ],
                "test_id": "withs"
            },
            {
                "arr": [
                    3,
                    3,
                    5,
                    10
                ],
                "test_id": "withs"
            }
        ]
    },
    {
	"testcase": "MB-50881",
        "statements":"WITH s as ([{\"a\":1}, {\"a\":2}]) SELECT s1.a FROM s AS s1 WHERE s1.a = 1 UNION ALL SELECT s1.a + 10 AS a11 FROM s AS s1 WHERE s1.a = 2",
        "results": [
            {
                "a11": 12
            },
            {
                "a": 1
            }
        ]
    },
    {
	"testcase": "MB-52200",
        "statements":"WITH arrs AS ([1,2,3,4]) SELECT meta().id, FIRST v FOR v IN arrs END AS elem FROM shellTest s WHERE s.c11 = 1 AND type = \"left\"",
        "results": [
            {
                "elem": 1,
                "id": "test11_withs"
            }
        ]
    },
    {
	"testcase": "MB-55978, part 1",
        "explain": {
            "disabled": false,
            "results": [
                {
                    "present": true
                }
            ],
            "statement": "SELECT true AS present FROM $explan AS p WHERE ANY v WITHIN p.`plan`.`~child`.`~children` SATISFIES v.`#operator` = 'ExpressionScan' AND v.`alias` = 'c1' AND v.`nested_loop` = true AND v.`uncorrelated` = true END"
        },
        "statements":"WITH a AS ([1, 2, 3]) SELECT c1, st.c12 FROM shellTest st JOIN a AS c1 USE NL ON st.c11 = c1 WHERE st.type = \"left\"",
        "results": [
            {
                "c1": 1,
                "c12": 10
            },
            {
                "c1": 2,
                "c12": 20
            },
            {
                "c1": 3,
                "c12": 30
            }
        ]
    },
    {
	"testcase": "MB-55978, part 2, ExpressionScan inside correlated subquery, main query covered",
        "explain": {
            "disabled": false,
            "results": [
                {
                    "present": true
                }
            ],
            "statement": "SELECT true AS present FROM $explan AS p WHERE ANY u WITHIN p.`plan`.`~children` SATISFIES u.`#operator` LIKE 'IndexScan%' AND u.`covers` IS NOT MISSING END AND ANY v WITHIN p.`~subqueries`[0].plan.`~children` SATISFIES v.`#operator` = 'ExpressionScan' AND v.`alias` = 's' AND v.`uncorrelated` IS MISSING END"
        },
        "statements":"SELECT (SELECT s, st.c11 FROM st.a11 AS s) AS sub FROM shellTest AS st WHERE st.c12 = 30 AND st.type = \"left\"",
        "results": [
            {
                "sub": [
                    {
                        "c11": 3,
                        "s": 3
                    },
                    {
                        "c11": 3,
                        "s": 4
                    },
                    {
                        "c11": 3,
                        "s": 20
                    },
                    {
                        "c11": 3,
                        "s": 40
                    }
                ]
            }
        ]
    },
    {
	"testcase": "MB-55978, part 3, ExpressionScan under nested-loop join inside correlated subquery, main query covered",
        "explain": {
            "disabled": false,
            "results": [
                {
                    "present": true
                }
            ],
            "statement": "SELECT true AS present FROM $explan AS p WHERE ANY u WITHIN p.`plan`.`~children` SATISFIES u.`#operator` LIKE 'IndexScan%' AND u.`covers` IS NOT MISSING END AND ANY v WITHIN p.`~subqueries`[0].plan.`~child`.`~children` SATISFIES v.`#operator` = 'ExpressionScan' AND v.`alias` = 'a1' AND v.`nested_loop` = true AND v.`uncorrelated` = true END"
        },
        "statements":"SELECT (WITH a AS ([20, 40]) SELECT s, st.c11 FROM st.a11 AS s JOIN a AS a1 USE NL ON a1 = s) AS sub FROM shellTest AS st WHERE st.c12 = 30 AND st.type = \"left\"",
        "results": [
            {
                "sub": [
                    {
                        "c11": 3,
                        "s": 20
                    },
                    {
                        "c11": 3,
                        "s": 40
                    }
                ]
            }
        ]
    },
    {
	"testcase": "MB-57903",
        "statements": "select a, (SELECT RAW (SELECT RAW a) ) AS b  from [1,2,3] a",
        "results": [
            {
                "a": 1,
                "b": [
                    [
                        1
                    ]
                ]
            },
            {
                "a": 2,
                "b": [
                    [
                        2
                    ]
                ]
            },
            {
                "a": 3,
                "b": [
                    [
                        3
                    ]
                ]
            }
        ]
    },
    {
	"testcase": "MB-57904",
        "statements": "select a, (WITH w1 AS (a) SELECT RAW w1) AS b  from [1,2,3] a",
        "results": [
             {
                "a": 1,
                "b": [
                    1
                ]
            },
            {
                "a": 2,
                "b": [
                    2
                ]
            },
            {
                "a": 3,
                "b": [
                    3
                ]
            }
        ]
    }
]

