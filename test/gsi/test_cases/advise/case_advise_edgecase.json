[
  {
    "statements": "advise select a[1] from shellTest AS a where a[1] = 10",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_statement": "CREATE INDEX adv_self1 ON `shellTest`(self[1])",
                  "keyspace_alias": "shellTest_a"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_self1 ON `shellTest`(self[1])",
                  "keyspace_alias": "shellTest_a",
                  "recommending_rule": "Index keys follow order of predicate types: 2. equality/null/missing."
                }
              ]
            }
          }
        },
        "query": "select a[1] from shellTest AS a where a[1] = 10"
      }
    ]
  },
  {
    "statements": "advise select a[1] from shellTest AS a where a[1:3] = 10",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_statement": "CREATE INDEX adv_self13_self1 ON `shellTest`(self[1 : 3],self[1])",
                  "keyspace_alias": "shellTest_a"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_self13 ON `shellTest`(self[1 : 3])",
                  "keyspace_alias": "shellTest_a",
                  "recommending_rule": "Index keys follow order of predicate types: 2. equality/null/missing."
                }
              ]
            }
          }
        },
        "query": "select a[1] from shellTest AS a where a[1:3] = 10"
      }
    ]
  },
  {
    "statements": "advise select a[1:3] from shellTest AS a where a.b[1:3] = 10",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_statement": "CREATE INDEX adv_b13_self13 ON `shellTest`(`b`[1 : 3],self[1 : 3])",
                  "keyspace_alias": "shellTest_a"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_b13 ON `shellTest`(`b`[1 : 3])",
                  "keyspace_alias": "shellTest_a",
                  "recommending_rule": "Index keys follow order of predicate types: 2. equality/null/missing."
                }
              ]
            }
          }
        },
        "query": "select a[1:3] from shellTest AS a where a.b[1:3] = 10"
      }
    ]
  },
  {
    "statements": "advise select a[1:3] from shellTest AS a where a is not null",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_self ON `shellTest`(self)",
                  "keyspace_alias": "shellTest_a",
                  "recommending_rule": "Index keys follow order of predicate types: 8. not null/not missing/valued."
                }
              ]
            }
          }
        },
        "query": "select a[1:3] from shellTest AS a where a is not null"
      }
    ]
  },
  {
    "statements": "advise SELECT * FROM shellTest AS c WHERE ANY p IN OBJECT_PAIRS(c.productIds) SATISFIES [p.name, ARRAY_COUNT(p.val) > 0, c.metadata.configurations.[p.name].enabled, ARRAY_CONTAINS(IFMISSINGORNULL(c.deletedFor, []),p.name)] = [\"US\", TRUE, FALSE, FALSE] END",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_DISTINCT_object_pairs_productIds_name_array_count_val_metada4251025607 ON `shellTest`(DISTINCT ARRAY [`p`.`name`, 0 < array_count((`p`.`val`)), `metadata`.`configurations`.[`p`.`name`].`enabled`, array_contains(ifmissingornull((`deletedFor`), []), (`p`.`name`))] FOR p in object_pairs((`productIds`)) END)",
                  "keyspace_alias": "shellTest_c",
                  "recommending_rule": "Index keys follow order of predicate types: 6. array predicate."
                }
              ]
            }
          }
        },
        "query": "SELECT * FROM shellTest AS c WHERE ANY p IN OBJECT_PAIRS(c.productIds) SATISFIES [p.name, ARRAY_COUNT(p.val) > 0, c.metadata.configurations.[p.name].enabled, ARRAY_CONTAINS(IFMISSINGORNULL(c.deletedFor, []),p.name)] = [\"US\", TRUE, FALSE, FALSE] END"
      }
    ]
  },
  {
    "statements": "advise select * from (select * from shellTest where a11 > 0) sub",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_a11 ON `shellTest`(`a11`)",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 5. less than/between/greater than."
                }
              ]
            }
          }
        },
        "query": "select * from (select * from shellTest where a11 > 0) sub"
      }
    ]
  },
  {
    "statements": "advise select c21 from shellTest where a11 is missing and type=\"advise\"",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_statement": "CREATE INDEX adv_a11ISMISSING_type_c21 ON `shellTest`(`a11` IS MISSING,`c21`) WHERE `type` = 'advise' AND `a11` IS MISSING",
                  "keyspace_alias": "shellTest"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_a11ISMISSING_type ON `shellTest`(`a11` IS MISSING) WHERE `type` = 'advise' AND `a11` IS MISSING",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 2. equality/null/missing, 11. flavor for partial index."
                }
              ]
            }
          }
        },
        "query": "select c21 from shellTest where a11 is missing and type=\"advise\""
      }
    ]
  },
  {
    "statements": "advise select c21 from shellTest where a11 is missing and (a21 is null or a31 < 10)",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_a21_a11 ON `shellTest`(`a21`,`a11`)",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 2. equality/null/missing."
                },
                {
                  "index_statement": "CREATE INDEX adv_a11ISMISSING_a31 ON `shellTest`(`a11` IS MISSING,`a31`) WHERE `a11` IS MISSING",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 2. equality/null/missing, 5. less than/between/greater than."
                }
              ]
            }
          }
        },
        "query": "select c21 from shellTest where a11 is missing and (a21 is null or a31 < 10)"
      }
    ]
  },
  {
    "statements": "advise select c21 from shellTest where a21 = 10 and (a11 is missing or c11 is not null)",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_statement": "CREATE INDEX adv_a21_a11_c11_c21 ON `shellTest`(`a21`,`a11`,`c11`,`c21`)",
                  "keyspace_alias": "shellTest"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_a21_a11_c11 ON `shellTest`(`a21`,`a11`,`c11`)",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 1. Common leading key for disjunction (2. equality/null/missing), 2. equality/null/missing, 8. not null/not missing/valued."
                }
              ]
            }
          }
        },
        "query": "select c21 from shellTest where a21 = 10 and (a11 is missing or c11 is null)"
      }
    ]
  },
  {
    "statements": "advise select c21 from shellTest where a11 = 10 or a12 is null or a13 is missing",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_a11 ON `shellTest`(`a11`)",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 2. equality/null/missing."
                },
                {
                  "index_statement": "CREATE INDEX adv_a12 ON `shellTest`(`a12`)",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 2. equality/null/missing."
                },
                {
                  "index_statement": "CREATE INDEX adv_a13ISMISSING ON `shellTest`(`a13` IS MISSING) WHERE `a13` IS MISSING",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 2. equality/null/missing."
                }
              ]
            }
          }
        },
        "query": "select c21 from shellTest where a11 = 10 or a12 is null or a13 is missing"
      }
    ]
  },
  {
    "statements": "advise SELECT META(p).id, ARRAY_DISTINCT(IFMISSING(rooms[*].num,[])) FROM shellTest AS p WHERE (guestCode = IFNULL($guestCode, '') OR guestCode = '') AND (checkinTime BETWEEN $startTime AND $endTime) AND (ANY s IN rooms SATISFIES [s.level,s.size, s.num] = [$level, $size, $num] END)",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_statement": "CREATE INDEX adv_guestCode_checkinTime_DISTINCT_rooms_level_size_num_array_di1747996179 ON `shellTest`(`guestCode`,`checkinTime`,DISTINCT ARRAY [`s`.`level`, `s`.`size`, `s`.`num`] FOR s in `rooms` END,array_distinct(ifmissing((array_star((`rooms`)).`num`), [])))",
                  "keyspace_alias": "shellTest_p"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_guestCode_checkinTime_DISTINCT_rooms_level_size_num ON `shellTest`(`guestCode`,`checkinTime`,DISTINCT ARRAY [`s`.`level`, `s`.`size`, `s`.`num`] FOR s in `rooms` END)",
                  "keyspace_alias": "shellTest_p",
                  "recommending_rule": "Index keys follow order of predicate types: 1. Common leading key for disjunction (2. equality/null/missing, 4. not less than/between/not greater than, 6. array predicate)."
                }
              ]
            }
          }
        },
        "query": "SELECT META(p).id, ARRAY_DISTINCT(IFMISSING(rooms[*].num,[])) FROM shellTest AS p WHERE (guestCode = IFNULL($guestCode, '') OR guestCode = '') AND (checkinTime BETWEEN $startTime AND $endTime) AND (ANY s IN rooms SATISFIES [s.level,s.size, s.num] = [$level, $size, $num] END)"
      }
    ]
  },
  {
    "statements": "advise SELECT meta().id FROM shellTest st WHERE ANY cba IN st.a SATISFIES [cba.type,cba.val,cba.name] = [\"doc\", \"4\", \"word\"] OR [cba.type,cba.val,cba.name] = [\"doc\", \"7\", \"excel\"] OR ([cba.type,cba.val,cba.name] >= [\"ppt\", \"xc\"] AND [cba.type,cba.val,cba.name] < [\"ppt\", SUCCESSOR(\"xc\")]) OR ([cba.type,cba.val,cba.name] >= [\"pdf\", \"paper\"] AND [cba.type,cba.val,cba.name] < [\"pdf\", SUCCESSOR(\"paper\")]) END and st.b is not missing and length(st.c) > 5",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_statement": "CREATE INDEX adv_DISTINCT_a_type_val_name_type_val_name_type_val_name_type_va999292206 ON `shellTest`(DISTINCT ARRAY [`cba`.`type`, `cba`.`val`, `cba`.`name`] FOR cba in `a` END,`b`,length((`c`)))",
                  "keyspace_alias": "shellTest_st"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_DISTINCT_a_type_val_name_type_val_name_type_val_name_type_va999292206 ON `shellTest`(DISTINCT ARRAY [`cba`.`type`, `cba`.`val`, `cba`.`name`] FOR cba in `a` END,`b`,length((`c`)))",
                  "keyspace_alias": "shellTest_st",
                  "recommending_rule": "Index keys follow order of predicate types: 6. array predicate, 8. not null/not missing/valued, 9. function index."
                }
              ]
            }
          }
        },
        "query": "SELECT meta().id FROM shellTest st WHERE ANY cba IN st.a SATISFIES [cba.type,cba.val,cba.name] = [\"doc\", \"4\", \"word\"] OR [cba.type,cba.val,cba.name] = [\"doc\", \"7\", \"excel\"] OR ([cba.type,cba.val,cba.name] >= [\"ppt\", \"xc\"] AND [cba.type,cba.val,cba.name] < [\"ppt\", SUCCESSOR(\"xc\")]) OR ([cba.type,cba.val,cba.name] >= [\"pdf\", \"paper\"] AND [cba.type,cba.val,cba.name] < [\"pdf\", SUCCESSOR(\"paper\")]) END and st.b is not missing and length(st.c) > 5"
      }
    ]
  },
  {
    "statements": "advise select id, name from shellTest where id in [1, 10, 20] and (c < 'x' or c is missing)",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_statement": "CREATE INDEX adv_id_c_name ON `shellTest`(`id`,`c`,`name`)",
                  "keyspace_alias": "shellTest"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_id_c ON `shellTest`(`id`,`c`)",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 1. Common leading key for disjunction (3. in, 5. less than/between/greater than)."
                }
              ]
            }
          }
        },
        "query": "select id, name from shellTest where id in [1, 10, 20] and (c < 'x' or c is missing)"
      }
    ]
  },
  {
    "statements": "advise select id, name from shellTest where id in [1, 10, 20] and (c is missing or c < 'x')",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_statement": "CREATE INDEX adv_id_c_name ON `shellTest`(`id`,`c`,`name`)",
                  "keyspace_alias": "shellTest"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_id_c ON `shellTest`(`id`,`c`)",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 1. Common leading key for disjunction (3. in, 5. less than/between/greater than)."
                }
              ]
            }
          }
        },
        "query": "select id, name from shellTest where id in [1, 10, 20] and (c is missing or c < 'x')"
      }
    ]
  },
  {
    "statements": "advise select id, name from shellTest where id in [1, 10, 20] and c is missing and (a < 10 or a > 20)",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_statement": "CREATE INDEX adv_id_a_c_name ON `shellTest`(`id`,`a`,`c`,`name`)",
                  "keyspace_alias": "shellTest"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_id_a_c ON `shellTest`(`id`,`a`,`c`)",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 1. Common leading key for disjunction (3. in, 5. less than/between/greater than, 2. equality/null/missing)."
                }
              ]
            }
          }
        },
        "query": "select id, name from shellTest where id in [1, 10, 20] and c is missing and (a < 10 or a > 20)"
      }
    ]
  },
  {
    "statements": "advise select c21 from shellTest where a11 is missing or a11 is not null",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_a11ISMISSING ON `shellTest`(`a11` IS MISSING) WHERE `a11` IS MISSING",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 2. equality/null/missing."
                },
                {
                  "index_statement": "CREATE INDEX adv_a11 ON `shellTest`(`a11`)",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 8. not null/not missing/valued."
                }
              ]
            }
          }
        },
        "query": "select c21 from shellTest where a11 is missing or a11 is not null"
      }
    ]
  }
]