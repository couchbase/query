[
  {
    "testcase": "MB-54809",
    "statements": "advise select 1 from shellTest AS b where (NOW_MILLIS() - STR_TO_MILLIS(b.f1.time))/1000 > 300",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_statement": "CREATE INDEX adv_str_to_millis_f1_time ON `shellTest`(str_to_millis((`f1`.`time`)))",
                  "keyspace_alias": "shellTest_b"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_str_to_millis_f1_time ON `shellTest`(str_to_millis((`f1`.`time`)))",
                  "keyspace_alias": "shellTest_b",
                  "recommending_rule": "Index keys follow order of predicate types: 5. less than/greater than."
                }
              ]
            }
          }
        },
        "query": "select 1 from shellTest AS b where (NOW_MILLIS() - STR_TO_MILLIS(b.f1.time))/1000 > 300"
      }
    ]
  },
  {
    "testcase": "MB-56528",
    "statements": "advise SELECT a.c1, u111 FROM shellTest AS a UNNEST a.a1 AS u1 UNNEST u1.a11 AS u11 UNNEST u11.a111 AS u111 WHERE a.o1.id = 'abc' AND u111.name = 'xyz'",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_ALL_a1_a11_a111_name_o1_id ON `shellTest`(ALL ARRAY (ALL ARRAY (ALL ARRAY `u111`.`name` FOR u111 IN `u11`.`a111` END) FOR u11 IN `u1`.`a11` END) FOR u1 IN `a1` END,`o1`.`id`)",
                  "keyspace_alias": "shellTest_a",
                  "recommending_rule": "Index keys follow order of predicate types: 1. leading array index for unnest, 2. equality/null/missing."
                }
              ]
            }
          }
        },
        "query": "SELECT a.c1, u111 FROM shellTest AS a UNNEST a.a1 AS u1 UNNEST u1.a11 AS u11 UNNEST u11.a111 AS u111 WHERE a.o1.id = 'abc' AND u111.name = 'xyz'"
      }
    ]
  },
  {
    "testcase": "MB-57346 part 1",
    "statements": "advise SELECT * FROM shellTest WHERE (c1 = false OR c1 IS MISSING) ORDER BY c3",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_c1 ON `shellTest`(`c1` INCLUDE MISSING)",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 1. Common leading key for disjunction (2. equality/null/missing)."
                }
              ]
            }
          }
        },
        "query": "SELECT * FROM shellTest WHERE (c1 = false OR c1 IS MISSING) ORDER BY c3"
      }
    ]
  },
  {
    "testcase": "MB-57346 part 2",
    "statements": "advise SELECT * FROM shellTest WHERE (c1 = false OR c1 IS MISSING) AND ANY v IN a1 SATISFIES v = 11 END ORDER BY c3",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_DISTINCT_a1_c1 ON `shellTest`(DISTINCT ARRAY `v` FOR `v` IN `a1` END,`c1`)",
                  "keyspace_alias": "shellTest",
                  "recommending_rule": "Index keys follow order of predicate types: 1. Common leading key for disjunction (2. equality/null/missing, 2. equality/null/missing)."
                }
              ]
            }
          }
        },
        "query": "SELECT * FROM shellTest WHERE (c1 = false OR c1 IS MISSING) AND ANY v IN a1 SATISFIES v = 11 END ORDER BY c3"
      }
    ]
  },
  {
    "testcase": "MB-57729",
    "statements": "advise SELECT COUNT(s.c1) AS num FROM shellTest AS s UNNEST a1 AS us WHERE us.type = 'x1'",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_property": "FULL GROUPBY \u0026 AGGREGATES pushdown",
                  "index_statement": "CREATE INDEX adv_ALL_a1_type_c1 ON `shellTest`(ALL ARRAY `us`.`type` FOR us IN `a1` END,`c1`)",
                  "keyspace_alias": "shellTest_s"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_ALL_a1_type_c1 ON `shellTest`(ALL ARRAY `us`.`type` FOR us IN `a1` END,`c1`)",
                  "keyspace_alias": "shellTest_s",
                  "recommending_rule": "Index keys follow order of predicate types: 1. leading array index for unnest, 7. not null/not missing/valued."
                }
              ]
            }
          }
        },
        "query": "SELECT COUNT(s.c1) AS num FROM shellTest AS s UNNEST a1 AS us WHERE us.type = 'x1'"
      }
    ]
  },
  {
    "testcase": "MB-56088, part 1, no predicate on unnest aliases",
    "statements": "advise select d.c3 from shellTest AS d UNNEST d.a1 AS a UNNEST OBJECT_VALUES(a.o) AS b WHERE d.c2 BETWEEN 10 AND 20 AND d.c1 = 10",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_ALL_a1_object_values_a_o_b_c1_c2 ON `shellTest`(ALL ARRAY (ALL ARRAY `b` FOR b IN object_values((`a`.`o`)) END) FOR a IN `a1` END,`c1`,`c2`)",
                  "keyspace_alias": "shellTest_d",
                  "recommending_rule": "Index keys follow order of predicate types: 1. leading array index for unnest, 2. equality/null/missing, 4. not less than/between/not greater than."
                }
              ]
            }
          }
        },
        "query": "select d.c3 from shellTest AS d UNNEST d.a1 AS a UNNEST OBJECT_VALUES(a.o) AS b WHERE d.c2 BETWEEN 10 AND 20 AND d.c1 = 10"
      }
    ]
  },
  {
    "testcase": "MB-56088, part 2, predicate on level 1 unnest alias",
    "statements": "advise select d.c3 from shellTest AS d UNNEST d.a1 AS a UNNEST OBJECT_VALUES(a.o) AS b WHERE d.c2 BETWEEN 10 AND 20 AND d.c1 = 10 AND a.x = 20",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_ALL_a1_x_c1_c2 ON `shellTest`(ALL ARRAY `a`.`x` FOR a IN `a1` END,`c1`,`c2`)",
                  "keyspace_alias": "shellTest_d",
                  "recommending_rule": "Index keys follow order of predicate types: 1. leading array index for unnest, 2. equality/null/missing, 4. not less than/between/not greater than."
                }
              ]
            }
          }
        },
        "query": "select d.c3 from shellTest AS d UNNEST d.a1 AS a UNNEST OBJECT_VALUES(a.o) AS b WHERE d.c2 BETWEEN 10 AND 20 AND d.c1 = 10 AND a.x = 20"
      }
    ]
  },
  {
    "testcase": "MB-56088, part 3, predicates on level 1 unnest alias",
    "statements": "advise select d.c3 from shellTest AS d UNNEST d.a1 AS a UNNEST OBJECT_VALUES(a.o) AS b WHERE d.c2 BETWEEN 10 AND 20 AND d.c1 = 10 AND a.x = 20 AND a.y < 30",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_ALL_a1_x_y_c1_c2 ON `shellTest`(ALL ARRAY FLATTEN_KEYS(`a`.`x`,`a`.`y`) FOR a IN `a1` END,`c1`,`c2`)",
                  "keyspace_alias": "shellTest_d",
                  "recommending_rule": "Index keys follow order of predicate types: 1. leading array index for unnest, 2. equality/null/missing, 4. not less than/between/not greater than."
                }
              ]
            }
          }
        },
        "query": "select d.c3 from shellTest AS d UNNEST d.a1 AS a UNNEST OBJECT_VALUES(a.o) AS b WHERE d.c2 BETWEEN 10 AND 20 AND d.c1 = 10 AND a.x = 20 AND a.y < 30"
      }
    ]
  },
  {
    "testcase": "MB-56088, part 4, predicate on level 2 unnest alias",
    "statements": "advise select d.c3 from shellTest AS d UNNEST d.a1 AS a UNNEST OBJECT_VALUES(a.o) AS b WHERE d.c2 BETWEEN 10 AND 20 AND d.c1 = 10 AND b.x = 20",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_statement": "CREATE INDEX adv_ALL_a1_object_values_a_o_x_c1_c2_c3 ON `shellTest`(ALL ARRAY (ALL ARRAY `b`.`x` FOR b IN object_values((`a`.`o`)) END) FOR a IN `a1` END,`c1`,`c2`,`c3`)",
                  "keyspace_alias": "shellTest_d"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_ALL_a1_object_values_a_o_x_c1_c2 ON `shellTest`(ALL ARRAY (ALL ARRAY `b`.`x` FOR b IN object_values((`a`.`o`)) END) FOR a IN `a1` END,`c1`,`c2`)",
                  "keyspace_alias": "shellTest_d",
                  "recommending_rule": "Index keys follow order of predicate types: 1. leading array index for unnest, 2. equality/null/missing, 4. not less than/between/not greater than."
                }
              ]
            }
          }
        },
        "query": "select d.c3 from shellTest AS d UNNEST d.a1 AS a UNNEST OBJECT_VALUES(a.o) AS b WHERE d.c2 BETWEEN 10 AND 20 AND d.c1 = 10 AND b.x = 20"
      }
    ]
  },
  {
    "testcase": "MB-56088, part 5, predicates on level 2 unnest alias",
    "statements": "advise select d.c3 from shellTest AS d UNNEST d.a1 AS a UNNEST OBJECT_VALUES(a.o) AS b WHERE d.c2 BETWEEN 10 AND 20 AND d.c1 = 10 AND b.x = 20 AND b.y < 30",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_statement": "CREATE INDEX adv_ALL_a1_object_values_a_o_x_y_c1_c2_c3 ON `shellTest`(ALL ARRAY (ALL ARRAY FLATTEN_KEYS(`b`.`x`,`b`.`y`) FOR b IN object_values((`a`.`o`)) END) FOR a IN `a1` END,`c1`,`c2`,`c3`)",
                  "keyspace_alias": "shellTest_d"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_ALL_a1_object_values_a_o_x_y_c1_c2 ON `shellTest`(ALL ARRAY (ALL ARRAY FLATTEN_KEYS(`b`.`x`,`b`.`y`) FOR b IN object_values((`a`.`o`)) END) FOR a IN `a1` END,`c1`,`c2`)",
                  "keyspace_alias": "shellTest_d",
                  "recommending_rule": "Index keys follow order of predicate types: 1. leading array index for unnest, 2. equality/null/missing, 4. not less than/between/not greater than."
                }
              ]
            }
          }
        },
        "query": "select d.c3 from shellTest AS d UNNEST d.a1 AS a UNNEST OBJECT_VALUES(a.o) AS b WHERE d.c2 BETWEEN 10 AND 20 AND d.c1 = 10 AND b.x = 20 AND b.y < 30"
      }
    ]
  },
  {
    "testcase": "MB-56088, part 6, mixed predicates on level 1 and level 2 unnest alias",
    "statements": "advise select d.c3 from shellTest AS d UNNEST d.a1 AS a UNNEST OBJECT_VALUES(a.o) AS b WHERE d.c2 BETWEEN 10 AND 20 AND d.c1 = 10 AND a.x = 20 AND b.y < 30",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": {
              "covering_indexes": [
                {
                  "index_statement": "CREATE INDEX adv_ALL_a1_object_values_a_o_x_y_c1_c2_c3 ON `shellTest`(ALL ARRAY (ALL ARRAY FLATTEN_KEYS(`a`.`x`,`b`.`y`) FOR b IN object_values((`a`.`o`)) END) FOR a IN `a1` END,`c1`,`c2`,`c3`)",
                  "keyspace_alias": "shellTest_d"
                }
              ],
              "indexes": [
                {
                  "index_statement": "CREATE INDEX adv_ALL_a1_object_values_a_o_x_y_c1_c2 ON `shellTest`(ALL ARRAY (ALL ARRAY FLATTEN_KEYS(`a`.`x`,`b`.`y`) FOR b IN object_values((`a`.`o`)) END) FOR a IN `a1` END,`c1`,`c2`)",
                  "keyspace_alias": "shellTest_d",
                  "recommending_rule": "Index keys follow order of predicate types: 1. leading array index for unnest, 2. equality/null/missing, 4. not less than/between/not greater than."
                }
              ]
            }
          }
        },
        "query": "select d.c3 from shellTest AS d UNNEST d.a1 AS a UNNEST OBJECT_VALUES(a.o) AS b WHERE d.c2 BETWEEN 10 AND 20 AND d.c1 = 10 AND a.x = 20 AND b.y < 30"
      }
    ]
  },
  {
    "testcase": "MB-62059",
    "statements": "advise SELECT * FROM shellTest WHERE ANY i IN [1,2] SATISFIES i = id END",
    "advise": true,
    "results": [
      {
        "#operator": "Advise",
        "advice": {
          "#operator": "IndexAdvice",
          "adviseinfo": {
            "recommended_indexes": "No secondary index recommendation at this time, primary index may apply."
          }
        },
        "query": "SELECT * FROM shellTest WHERE ANY i IN [1,2] SATISFIES i = id END"
      }
    ]
  }
]
